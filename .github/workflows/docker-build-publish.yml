name: "JFrog-GitHubb NPM Publish OIDC Integration"
on: push

permissions:
  id-token: write

  
jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      OIDC_AUDIENCE: 'jfrog-github'  # Audience for the OIDC token
      OIDC_PROVIDER: 'github'  # OIDC provider name
      PLATFORM_REPO: 'eks-npm-npm'  # Your platform repository

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JFrog CLI with OIDC
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: https://elinaf.jfrog.io
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}

      - name: Login to JFrog Artifactory using OIDC
        run: |
          # Login to JFrog using the ID token directly
          echo "${{ secrets.JF_USERNAME }}" | docker login ${{ secrets.JF_URL }} -u ${{ secrets.JF_USERNAME }} --password-stdin

      - name: Build and Push Docker Image to JFrog Artifactory
        uses: docker/build-push-action@v6
        with:
          context: .  # Use `.` if Dockerfile is at the root of the repository
          push: true
          tags: elinaf.jfrog.io/test-local-basselm/oceaneeringg/actions-runnerrr-linux:0.1.2-beta.14

      - name: Publish Build Info with JFrog CLI
        run: |
          # Configure JFrog CLI with username and token
          jf c add my-server --url=${{ secrets.JF_URL }} --interactive=false
          
          # Collect environment variables for the build
          jf rt build-collect-env github-actions-build 1 

          # Collect VCS details from git and add them to the build
          jf rt build-add-git github-actions-build 1 --server-id=my-server

          # Publish build info to JFrog Artifactory
          jf rt build-publish github-actions-build 1 --server-id=my-server
